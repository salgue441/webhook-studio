// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Endpoint {
  id        String    @id @default(cuid())
  urlSlug   String    @unique
  name      String?
  userId    String?
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  isActive  Boolean   @default(true)

  requests WebhookRequest[]
  forwards ForwardRule[]
  shares   SharedLink[]

  @@index([urlSlug])
  @@index([userId])
  @@map("endpoints")
}

model WebhookRequest {
  id             String   @id @default(cuid())
  endpointId     String
  method         String
  headers        Json
  body           Json?
  queryParams    Json?
  ipAddress      String?
  userAgent      String?
  receivedAt     DateTime @default(now())
  responseStatus Int?
  responseBody   Json?
  responseTime   Int?

  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@index([endpointId])
  @@index([receivedAt])
  @@map("webhook_requests")
}

model ForwardRule {
  id         String   @id @default(cuid())
  endpointId String
  targetUrl  String
  isActive   Boolean  @default(true)
  transform  Json?
  createdAt  DateTime @default(now())

  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@index([endpointId])
  @@map("forward_rules")
}

model MockEndpoint {
  id             String   @id @default(cuid())
  userId         String?
  path           String   @unique
  method         String   @default("POST")
  responseStatus Int      @default(200)
  responseBody   Json
  responseDelay  Int      @default(0) // in milliseconds
  conditions     Json?
  createdAt      DateTime @default(now())

  @@index([path])
  @@map("mock_endpoints")
}

model SharedLink {
  id           String    @id @default(cuid())
  endpointId   String
  shareToken   String    @unique
  passwordHash String?
  permissions  String    @default("read")
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())

  endpoint Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@index([shareToken])
  @@map("shared_links")
}
